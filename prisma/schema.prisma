// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  courses       UserCourse[]
  careers       UserCareer[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Career {
  id      Int      @id
  name    String
  periods Period[]
  users   UserCareer[]

@@unique([name])
}

model Period {
  id         Int     @id
  order      Int
  careerID   Int
  courses    Course[]
  career     Career  @relation(fields: [careerID], references: [id], onDelete: Cascade)

  @@unique([order, careerID])
}

model Course {
  id              Int      @id
  order           Int
  name            String
  area            String?
  description     String?
  hsWeekly        Int?
  hsTotal         Int?
  correlatives    CourseCorrelatives[]
  optatives       CourseOptatives[]
  equivalents     CourseEquivalents[]
  progress        UserCourse[]
  periods         Period[]

  @@unique([name])
}

model CourseCorrelatives {
  id               String       @id @default(cuid())
  courseId         Int
  course           Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId])
}

model CourseOptatives {
  id               String       @id @default(cuid())
  courseId         Int
  course           Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId])
}

model CourseEquivalents {
  id               String       @id @default(cuid())
  courseId         Int
  course           Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId])
}

model UserCourse {
  id               String       @id @default(cuid())
  courseId         Int
  userId           String
  qualification    Int?
  status           CourseStatus @default(PENDIENTE)
  course           Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
}

model UserCareer {
  id         String   @id @default(cuid())
  careerId   Int
  userId     String
  career     Career   @relation(fields: [careerId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([ careerId, userId])
}

enum Role {
  ADMIN
  USER
}

enum CourseStatus {
  CURSANDO
  PENDIENTE
  REGULARIZADA
  APROBADA
}